/*tslint:disable*/
////////////////////////////////////////////////////////
// ___   ___    _  _  ___ _____   ___ ___ ___ _____   //
// |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _| //
// | |) | (_) | | .` | (_) || |   | _|| |) | |  | |   //
// |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|   //
//                                                    //
// This file was generated by valory and should not   //
// be directly edited.                                //
////////////////////////////////////////////////////////


import {Valory, ApiRequest} from "valory-runtime";

  import {SimpleController} from "./controllers/simpleController";
  import {AuthorizedController} from "./controllers/authorizedController";
  import {AdvancedController} from "./controllers/advancedController";

  const SimpleControllerController = new SimpleController();
  const AuthorizedControllerController = new AuthorizedController();
  const AdvancedControllerController = new AdvancedController();

function pushArr(target: any[], other: any[]): any[] {
    if (other == null) {
        return target;
    }
    if (target == null) {
        return other;
    }
    const len = other.length;
    let i;
    for(i=0;i<len;i++){
        target.push(other[i]);
    }
    return target;
}

export = {
    register: (app: Valory) => {
        
        const SimpleControllerControllersomeHandlerMiddleware = pushArr((SimpleControllerController.someHandler as any).middleware, (SimpleControllerController as any).middleware);
        const SimpleControllerControllersomeHandlerPostMiddleware = pushArr((SimpleControllerController.someHandler as any).postMiddleware, (SimpleControllerController as any).postMiddleware);
        app.get("/base/some/path",{"operationId":"SimpleControllerSomeHandler","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"type":"string"}}},"description":"Swagger endpoint description","summary":"swagger summary","tags":["Simple"],"security":[],"parameters":[]},(req: ApiRequest, logger: any)=>{
            
            SimpleControllerController.logger = logger;
            SimpleControllerController.disableSerializer = false;
            
            return Promise.resolve(SimpleControllerController.someHandler(
                
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, SimpleControllerController.getHeaders(), SimpleControllerController.getStatus(), SimpleControllerController.disableSerializer);
                SimpleControllerController.clearStatus();
                SimpleControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },SimpleControllerControllersomeHandlerMiddleware,true,SimpleControllerControllersomeHandlerPostMiddleware, false);
        
        const SimpleControllerControllersomeOtherHandlerMiddleware = pushArr((SimpleControllerController.someOtherHandler as any).middleware, (SimpleControllerController as any).middleware);
        const SimpleControllerControllersomeOtherHandlerPostMiddleware = pushArr((SimpleControllerController.someOtherHandler as any).postMiddleware, (SimpleControllerController as any).postMiddleware);
        app.get("/base/{name}",{"operationId":"SimpleControllerSomeOtherHandler","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"type":"string"}}},"tags":["Simple"],"security":[],"parameters":[{"in":"path","name":"name","required":true,"type":"string"},{"in":"header","name":"authorization","required":true,"type":"string"}]},(req: ApiRequest, logger: any)=>{
            
            SimpleControllerController.logger = logger;
            SimpleControllerController.disableSerializer = false;
            
            return Promise.resolve(SimpleControllerController.someOtherHandler(
                req.path.name,req.headers.authorization,
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, SimpleControllerController.getHeaders(), SimpleControllerController.getStatus(), SimpleControllerController.disableSerializer);
                SimpleControllerController.clearStatus();
                SimpleControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },SimpleControllerControllersomeOtherHandlerMiddleware,true,SimpleControllerControllersomeOtherHandlerPostMiddleware, false);
        
        const SimpleControllerControllersubmitMiddleware = pushArr((SimpleControllerController.submit as any).middleware, (SimpleControllerController as any).middleware);
        const SimpleControllerControllersubmitPostMiddleware = pushArr((SimpleControllerController.submit as any).postMiddleware, (SimpleControllerController as any).postMiddleware);
        app.post("/base/submit",{"operationId":"SimpleControllerSubmit","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"properties":{"content":{"$ref":"#/definitions/Item"}},"required":["content"],"type":"object"}}},"tags":["Simple"],"security":[],"parameters":[{"in":"body","name":"input","required":true,"schema":{"$ref":"#/definitions/Item"}}]},(req: ApiRequest, logger: any)=>{
            
            SimpleControllerController.logger = logger;
            SimpleControllerController.disableSerializer = false;
            
            return Promise.resolve(SimpleControllerController.submit(
                req.body,
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, SimpleControllerController.getHeaders(), SimpleControllerController.getStatus(), SimpleControllerController.disableSerializer);
                SimpleControllerController.clearStatus();
                SimpleControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },SimpleControllerControllersubmitMiddleware,true,SimpleControllerControllersubmitPostMiddleware, false);
        
        const SimpleControllerControllerbodyPropsMiddleware = pushArr((SimpleControllerController.bodyProps as any).middleware, (SimpleControllerController as any).middleware);
        const SimpleControllerControllerbodyPropsPostMiddleware = pushArr((SimpleControllerController.bodyProps as any).postMiddleware, (SimpleControllerController as any).postMiddleware);
        app.post("/base/props",{"operationId":"SimpleControllerBodyProps","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"type":"string"}}},"tags":["Simple"],"security":[],"parameters":[{"in":"body","name":"body","schema":{"properties":{"item":{"$ref":"#/definitions/Item"},"data":{"$ref":"#/definitions/DataClass"}},"title":"SimpleControllerBodyPropsBody","type":"object","required":["item","data"]}}]},(req: ApiRequest, logger: any)=>{
            
            SimpleControllerController.logger = logger;
            SimpleControllerController.disableSerializer = false;
            
            return Promise.resolve(SimpleControllerController.bodyProps(
                req.body.item,req.body.data,
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, SimpleControllerController.getHeaders(), SimpleControllerController.getStatus(), SimpleControllerController.disableSerializer);
                SimpleControllerController.clearStatus();
                SimpleControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },SimpleControllerControllerbodyPropsMiddleware,true,SimpleControllerControllerbodyPropsPostMiddleware, false);
        
        const SimpleControllerControllertaggedMiddleware = pushArr((SimpleControllerController.tagged as any).middleware, (SimpleControllerController as any).middleware);
        const SimpleControllerControllertaggedPostMiddleware = pushArr((SimpleControllerController.tagged as any).postMiddleware, (SimpleControllerController as any).postMiddleware);
        app.get("/base/tagged",{"operationId":"SimpleControllerTagged","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"type":"string"}}},"tags":["Tagged","Simple"],"security":[],"parameters":[]},(req: ApiRequest, logger: any)=>{
            
            SimpleControllerController.logger = logger;
            SimpleControllerController.disableSerializer = false;
            
            return Promise.resolve(SimpleControllerController.tagged(
                
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, SimpleControllerController.getHeaders(), SimpleControllerController.getStatus(), SimpleControllerController.disableSerializer);
                SimpleControllerController.clearStatus();
                SimpleControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },SimpleControllerControllertaggedMiddleware,true,SimpleControllerControllertaggedPostMiddleware, false);
        
        const AuthorizedControllerControllersimpleGetMiddleware = pushArr((AuthorizedControllerController.simpleGet as any).middleware, (AuthorizedControllerController as any).middleware);
        const AuthorizedControllerControllersimpleGetPostMiddleware = pushArr((AuthorizedControllerController.simpleGet as any).postMiddleware, (AuthorizedControllerController as any).postMiddleware);
        app.get("/authorized",{"operationId":"AuthorizedControllerSimpleGet","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"type":"string"}}},"security":[],"parameters":[]},(req: ApiRequest, logger: any)=>{
            
            AuthorizedControllerController.logger = logger;
            AuthorizedControllerController.disableSerializer = false;
            
            return Promise.resolve(AuthorizedControllerController.simpleGet(
                
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, AuthorizedControllerController.getHeaders(), AuthorizedControllerController.getStatus(), AuthorizedControllerController.disableSerializer);
                AuthorizedControllerController.clearStatus();
                AuthorizedControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },AuthorizedControllerControllersimpleGetMiddleware,true,AuthorizedControllerControllersimpleGetPostMiddleware, false);
        
        const AuthorizedControllerControllergetDataMiddleware = pushArr((AuthorizedControllerController.getData as any).middleware, (AuthorizedControllerController as any).middleware);
        const AuthorizedControllerControllergetDataPostMiddleware = pushArr((AuthorizedControllerController.getData as any).postMiddleware, (AuthorizedControllerController as any).postMiddleware);
        app.post("/authorized/data",{"operationId":"AuthorizedControllerGetData","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"properties":{"username":{"type":"string"},"email":{"type":"string"}},"required":["username","email"],"type":"object"}}},"security":[],"parameters":[]},(req: ApiRequest, logger: any)=>{
            
            AuthorizedControllerController.logger = logger;
            AuthorizedControllerController.disableSerializer = false;
            
            return Promise.resolve(AuthorizedControllerController.getData(
                (req as any),
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, AuthorizedControllerController.getHeaders(), AuthorizedControllerController.getStatus(), AuthorizedControllerController.disableSerializer);
                AuthorizedControllerController.clearStatus();
                AuthorizedControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },AuthorizedControllerControllergetDataMiddleware,true,AuthorizedControllerControllergetDataPostMiddleware, false);
        
        const AdvancedControllerControllertypedPathMiddleware = pushArr((AdvancedControllerController.typedPath as any).middleware, (AdvancedControllerController as any).middleware);
        const AdvancedControllerControllertypedPathPostMiddleware = pushArr((AdvancedControllerController.typedPath as any).postMiddleware, (AdvancedControllerController as any).postMiddleware);
        app.get("/advanced/{path}",{"operationId":"AdvancedControllerTypedPath","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"type":"string","enum":["test","other"]}}},"description":"Various literal and alias types can be applied to path and query parameters","tags":["Advanced"],"security":[],"parameters":[{"in":"path","name":"path","required":true,"type":"string","enum":["test","other"]},{"description":"Description can be added to alias types","in":"query","name":"query","required":true,"type":"string"}]},(req: ApiRequest, logger: any)=>{
            
            AdvancedControllerController.logger = logger;
            AdvancedControllerController.disableSerializer = false;
            
            return Promise.resolve(AdvancedControllerController.typedPath(
                req.path.path,req.query.query,
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, AdvancedControllerController.getHeaders(), AdvancedControllerController.getStatus(), AdvancedControllerController.disableSerializer);
                AdvancedControllerController.clearStatus();
                AdvancedControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },AdvancedControllerControllertypedPathMiddleware,true,AdvancedControllerControllertypedPathPostMiddleware, false);
        
        const AdvancedControllerControllerenumInputMiddleware = pushArr((AdvancedControllerController.enumInput as any).middleware, (AdvancedControllerController as any).middleware);
        const AdvancedControllerControllerenumInputPostMiddleware = pushArr((AdvancedControllerController.enumInput as any).postMiddleware, (AdvancedControllerController as any).postMiddleware);
        app.post("/advanced/enums",{"operationId":"AdvancedControllerEnumInput","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"properties":{"response":{"type":"string"}},"required":["response"],"type":"object"}}},"description":"Enums can be used as inputs","tags":["Advanced"],"security":[],"parameters":[{"in":"body","name":"input","required":true,"schema":{"$ref":"#/definitions/ModelWithEnums"}}]},(req: ApiRequest, logger: any)=>{
            
            AdvancedControllerController.logger = logger;
            AdvancedControllerController.disableSerializer = false;
            
            return Promise.resolve(AdvancedControllerController.enumInput(
                req.body,
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, AdvancedControllerController.getHeaders(), AdvancedControllerController.getStatus(), AdvancedControllerController.disableSerializer);
                AdvancedControllerController.clearStatus();
                AdvancedControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },AdvancedControllerControllerenumInputMiddleware,true,AdvancedControllerControllerenumInputPostMiddleware, false);
        
        const AdvancedControllerControllerstandardResponseMiddleware = pushArr((AdvancedControllerController.standardResponse as any).middleware, (AdvancedControllerController as any).middleware);
        const AdvancedControllerControllerstandardResponsePostMiddleware = pushArr((AdvancedControllerController.standardResponse as any).postMiddleware, (AdvancedControllerController as any).postMiddleware);
        app.get("/advanced/standard",{"operationId":"AdvancedControllerStandardResponse","produces":["application/json"],"responses":{"200":{"description":"Ok","schema":{"$ref":"#/definitions/ApiResobject"}}},"description":"You can use generics to enforce response standardization","tags":["Advanced"],"security":[],"parameters":[]},(req: ApiRequest, logger: any)=>{
            
            AdvancedControllerController.logger = logger;
            AdvancedControllerController.disableSerializer = false;
            
            return Promise.resolve(AdvancedControllerController.standardResponse(
                
            )).then((response) => {
                
                const fullResponse = app.buildSuccess(response, AdvancedControllerController.getHeaders(), AdvancedControllerController.getStatus(), AdvancedControllerController.disableSerializer);
                AdvancedControllerController.clearStatus();
                AdvancedControllerController.clearHeaders();
                return fullResponse;
                
                
            });
        },AdvancedControllerControllerstandardResponseMiddleware,true,AdvancedControllerControllerstandardResponsePostMiddleware, false);
        
    },
    definitions: {"Item":{"description":"You can use interfaces as models.\nThis message will show up as a description.","properties":{"someField":{"type":"string","description":"You can also add validations and examples to individual properties","example":"squirtle","maxLength":20,"minLength":10},"optionalField":{"type":"string"},"aNumber":{"type":"number","format":"double"}},"required":["someField","aNumber"],"type":"object"},"DataClass":{"properties":{"name":{"type":"string","default":"Kerim"},"coolness":{"type":"number","format":"double","description":"Normal fields and validation still work","maximum":-1}},"required":["coolness"],"type":"object"},"AliasType":{"type":"string","description":"Description can be added to alias types","example":"potato"},"PrimaryColors":{"enum":["red","blue","yellow"],"type":"string"},"ModelWithEnums":{"properties":{"literal":{"type":"string","enum":["cool","uncool"]},"enum":{"$ref":"#/definitions/PrimaryColors"}},"required":["literal","enum"],"type":"object"},"ApiResobject":{"properties":{"status_code":{"type":"number","format":"double"},"response_data":{"type":"object","properties":{"potato":{"type":"string","enum":["cool"]}},"required":["potato"]}},"required":["status_code","response_data"],"type":"object"}},
    genroutesVersion: 1.1
}